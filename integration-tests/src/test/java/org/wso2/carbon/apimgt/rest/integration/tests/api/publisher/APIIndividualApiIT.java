/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: 0.10.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.api.publisher;

import javafx.scene.layout.Priority;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APIIndividualApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APICollectionApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.ApiException;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.API;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.ApiResponse;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.Sequence;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APIBusinessInformation;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APICorsConfiguration;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.FileInfo;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.LifecycleState;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APIList;

import java.io.File;

import java.util.ArrayList;

import org.testng.annotations.Test;
/**
 * API tests for APIIndividualApi
 */
public class APIIndividualApiIT {

    private final APIIndividualApi api = new APIIndividualApi();
    private final APICollectionApi apiSetup = new APICollectionApi();

    private String APIID = null;

    @BeforeClass
    public void beforeClass() throws ApiException {

        // Create an API for testing
        API body = new API();
        String contentType = "application/json";
        body.setName("Api");
        body.setContext("api");
        body.setVersion("1.0.0");
        body.setProvider("admin");
        body.setLifeCycleStatus("CREATED");
        body.setTransport(new ArrayList<String>() {{
            add("http");
        }});
        body.setCacheTimeout(100);
        body.setPolicies(new ArrayList<String>() {{
            add("Unlimited");
        }});
        body.setVisibility(API.VisibilityEnum.PUBLIC);
        body.setTags(new ArrayList<String>());
        body.setVisibleRoles(new ArrayList<String>());
        body.setVisibleTenants(new ArrayList<String>());
        body.setSequences(new ArrayList<Sequence>());
        body.setBusinessInformation(new APIBusinessInformation());
        body.setCorsConfiguration(new APICorsConfiguration());
        API response = apiSetup.apisPost(body);
        APIID = response.getId();
    }

    /**
     * Delete an API
     * <p>
     * This operation can be used to delete an existing API proving the Id of the API.
     *
     * @throws ApiException if the Api call fails
     */

    @Test(dependsOnMethods = "apisApiIdGetTest", enabled = true)
    public void apisApiIdDeleteTest() throws ApiException {
        String apiId = APIID;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.apisApiIdDelete(apiId, ifMatch, ifUnmodifiedSince);

        // TODO - assert API not found

        System.out.println("response is: ");
    }

    /**
     * Get gateway definition
     * <p>
     * This operation can be used to retrieve the gateway configuration of an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test(dependsOnMethods = "apisApiIdGetTest", enabled = true)
    public void apisApiIdGatewayConfigGetTest() throws ApiException {
        String apiId = APIID;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        api.apisApiIdGatewayConfigGet(apiId,ifNoneMatch, ifModifiedSince);

        // TODO: test validations return type void
    }

    /**
     * Update gateway configuration
     * <p>
     * This operation can be used to update the gateway configuration of an existing API. gateway configuration to be updated is passed as a form data parameter &#x60;gatewayConfig&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test(enabled = true)
    public void apisApiIdGatewayConfigPutTest() throws ApiException {
        String apiId = APIID;
        String gatewayConfig = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.apisApiIdGatewayConfigPut(apiId, gatewayConfig, ifMatch, ifUnmodifiedSince);

        // TODO: test validations return type void
    }

    /**
     * Get details of a specific API
     * <p>
     * Using this operation, you can retrieve complete details of a single API. You need to provide the Id of the API to retrive it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test(priority = 0)
    public void apisApiIdGetTest() throws ApiException {
        String apiId = APIID;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        API response = api.apisApiIdGet(apiId, ifNoneMatch, ifModifiedSince);
        Assert.assertEquals(response.getName(), "Api", "API name mismatch");
    }

    /* NF - Get API details for an invalid Api ID.
    *  This testcase verifies if response 404 needs to be returned once an invalid id is passed.
    *
    * */

    /*
    @Test(priority = 1)
    public void apisApiIdGetTest_NF() throws ApiException {
        String apiId = "InvalidApiId";
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
      //  API response = api.apisApiIdGet(apiId, ifNoneMatch, ifModifiedSince);
      //  System.out.println(response);

        ApiResponse responseCode = api.apisApiIdGetWithHttpInfo(apiId, ifNoneMatch, ifModifiedSince);
        Assert.assertEquals(responseCode.getStatusCode(), 404);
        //System.out.println(responseCode.getStatusCode());
        //Assert.assertEquals(response.getName(), "Api100", "API name mismatch");
    }*/

    /**
     * Update an API
     * <p>
     * This operation can be used to update an existing API. But the properties &#x60;name&#x60;, &#x60;version&#x60;, &#x60;context&#x60;, &#x60;provider&#x60;, &#x60;state&#x60; will not be changed by this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisApiIdPutTest() throws ApiException {

        String newApiDescription = "New API Description";
        String apiId = APIID;
        API body = api.apisApiIdGet(APIID, null, null);
        body.setDescription(newApiDescription);
        String contentType = "application/json";
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        API response = api.apisApiIdPut(apiId, body, ifMatch, ifUnmodifiedSince);
        Assert.assertEquals(response.getDescription(), newApiDescription, "description mismatch");
    }

    /**
     * Get swagger definition
     * <p>
     * This operation can be used to retrieve the swagger definition of an API.
     *
     * @throws ApiException if the Api call fails
     */

    @Test(priority = 1)
    public void apisApiIdSwaggerGetTest() throws ApiException {
        String apiId = APIID;
        String ifModifiedSince = null;
        String ifNoneMatch = null;
        ApiResponse response = api.apisApiIdSwaggerGetWithHttpInfo(APIID, ifNoneMatch,ifModifiedSince );
        int statusCode = response.getStatusCode();
        Assert.assertEquals(statusCode, 200, "Status Code mismatch");
    }

    /**
     * Update swagger definition
     * <p>
     * This operation can be used to update the swagger definition of an existing API. Swagger definition to be updated is passed as a form data parameter &#x60;apiDefinition&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisApiIdSwaggerPutTest() throws ApiException {
        String apiId = APIID;
        String endPointId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.apisApiIdSwaggerPut(apiId, endPointId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }

    /**
     * Get thumbnail image
     * <p>
     * This operation can be used to download a thumbnail image of an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisApiIdThumbnailGetTest() throws ApiException {
        String apiId = APIID;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        api.apisApiIdThumbnailGet(apiId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }

    /**
     * Upload a thumbnail image
     * <p>
     * This operation can be used to upload a thumbnail image of an API. The thumbnail to be uploaded should be given as a form data parameter &#x60;file&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisApiIdThumbnailPostTest() throws ApiException {
        String apiId = APIID;
        File file = new File(getClass().getResource("/img1.jpg").getFile());
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        //FileInfo response = api.apisApiIdThumbnailPost(apiId, file, ifMatch, ifUnmodifiedSince);
        ApiResponse response = api.apisApiIdThumbnailPostWithHttpInfo(apiId, file, ifMatch, ifUnmodifiedSince);
        int statusCode = response.getStatusCode();
        Assert.assertEquals(statusCode, 200 , "Status code does not match ");

        // TODO: test validations
    }

    /**
     * Change API Status
     * <p>
     * This operation is used to change the lifecycle of an API. Eg: Publish an API which is in &#x60;CREATED&#x60; state. In order to change the lifecycle, we need to provide the lifecycle &#x60;action&#x60; as a query parameter.  For example, to Publish an API, &#x60;action&#x60; should be &#x60;Publish&#x60;.  Some actions supports providing additional paramters which should be provided as &#x60;lifecycleChecklist&#x60; parameter. Please see parameters table for more information.
     *
     * @throws ApiException if the Api call fails
     */
    /*
    @Test
    public void apisChangeLifecyclePostTest() throws ApiException {
        String action = null;
        String apiId = APIID;
        String lifecycleChecklist = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        API response;

        // Created --> Published
        api.apisChangeLifecyclePost("Published", apiId, null, null, null);
        response = api.apisApiIdGet(apiId, null, null);
        Assert.assertEquals("Published", response.getLifeCycleStatus(), "API status mismatch in Published state");

        // Published --> Prototyped
        api.apisChangeLifecyclePost("Prototyped", apiId, null, null, null);
        response = api.apisApiIdGet(apiId, null, null);
        Assert.assertEquals("Prototyped", response.getLifeCycleStatus(), "API status mismatch in Prototyped state");

        // Prototyped --> Published
        api.apisChangeLifecyclePost("Published", apiId, null, null, null);
        response = api.apisApiIdGet(apiId, null, null);
        Assert.assertEquals("Published", response.getLifeCycleStatus(), "API status mismatch in Published state");

        /*
        // Published --> Blocked
        api.apisChangeLifecyclePost("Blocked", apiId, null, null, null);
        response = api.apisApiIdGet(apiId, null, null);
        Assert.assertEquals("Blocked", response.getLifeCycleStatus(), "API status mismatch in Published state");
*/
       /*
        // Blocked --> Deprecated
        api.apisChangeLifecyclePost("Deprecated", apiId, null, null, null);
        response = api.apisApiIdGet(apiId, null, null);
        Assert.assertEquals("Deprecated", response.getLifeCycleStatus(), "API status mismatch in Published state");

        // Deprecated --> Retired
        api.apisChangeLifecyclePost("Retired", apiId, null, null, null);
        response = api.apisApiIdGet(apiId, null, null);
        Assert.assertEquals("Retired", response.getLifeCycleStatus(), "API status mismatch in Published state");
    }
    */
    /**
     * Create a new API version
     * <p>
     * This operation can be used to create a new version of an existing API. The new version is specified as &#x60;newVersion&#x60; query parameter. New API will be in &#x60;CREATED&#x60; state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisCopyApiPostTest() throws ApiException {
        String newVersion = "1.1.0";
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String apiId = APIID;
        api.apisCopyApiPost(newVersion, apiId);
       // API response1 = api.apisApiIdGet(apiId, ifNoneMatch, ifModifiedSince);
        //System.out.println("Version: " +response1.getVersion());

        // TODO - needs search implementation to assert properly - commented.
        //APIList response = apiSetup.apisGet(1, 1, "version:1.1.0", null, null);
        //Assert.assertEquals(response.getList().get(0).getVersion(), newVersion, "API version mismatch on new API");
    }

    @Test
    public void apisApiIdWsdlGetTest() throws ApiException {
        String apiId = APIID;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        ApiResponse response = api.apisApiIdWsdlGetWithHttpInfo(apiId, ifNoneMatch, ifModifiedSince);
        int statusCode = response.getStatusCode();
        Assert.assertEquals(statusCode, 200, "Status code does not match");

    }

    @Test
    public void apisApiIdWsdlPutTest() throws ApiException {
        String apiId = APIID;
        File file = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        ApiResponse response = api.apisApiIdWsdlPutWithHttpInfo(apiId, file, ifMatch, ifUnmodifiedSince);
        int statusCode = response.getStatusCode();
        Assert.assertEquals(statusCode, 200, "Status code mismatch");

    }

    /**
     * Get Lifecycle state data of the API.
     *
     * This operation can be used to retrieve Lifecycle state data of the API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdLifecycleGetTest() throws ApiException {
        String apiId = APIID;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        LifecycleState response = api.apisApiIdLifecycleGet(apiId, ifNoneMatch, ifModifiedSince);
        System.out.println("response: "+response);
        // TODO: test validations
    }

    /**
     * Get Lifecycle state change history of the API.
     *
     * This operation can be used to retrieve Lifecycle state change history of the API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdLifecycleHistoryGetTest() throws ApiException {
        String apiId = APIID;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        api.apisApiIdLifecycleHistoryGet(apiId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }

    @Test
    public void apisApiIdLifecycleLifecyclePendingTaskDeleteTest() throws ApiException {
        String apiId = APIID;
        api.apisApiIdLifecycleLifecyclePendingTaskDelete(apiId);

        // TODO: test validations
    }

    @AfterClass
    public void afterClass() throws ApiException {
        // remove IndivAPI version 1.1.0
        APIList response = apiSetup.apisGet(1, 0, null, null);
        api.apisApiIdDelete(response.getList().get(0).getId(), null, null);
    }
}
