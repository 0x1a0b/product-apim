/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: 0.10.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.api.publisher;

import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.DocumentCollectionApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.ApiException;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.Document;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.API;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APIBusinessInformation;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APICorsConfiguration;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.Sequence;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APIList;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APICollectionApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APIIndividualApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.DocumentList;

import java.util.ArrayList;

/**
 * API tests for DocumentCollectionApi
 */
public class DocumentCollectionApiIT {

    private final DocumentCollectionApi api = new DocumentCollectionApi();
    private final APICollectionApi apiSetup = new APICollectionApi();
    private final APIIndividualApi apiIndividualApi = new APIIndividualApi();

    private String APIID = null;

    @BeforeClass
    public void beforeClass() throws ApiException {

        // Create an API for testing
        API body = new API();
        String contentType = "application/json";

        body.setName("DocAPI");
        body.setContext("docs");
        body.setVersion("1.0.0");
        body.setProvider("admin");
        body.setLifeCycleStatus("CREATED");
        body.setTransport(new ArrayList<String>() {{
            add("http");
        }});
        body.setCacheTimeout(100);
        body.setPolicies(new ArrayList<String>() {{
            add("Unlimited");
        }});
        body.setVisibility(API.VisibilityEnum.PUBLIC);
        body.setTags(new ArrayList<String>());
        body.setVisibleRoles(new ArrayList<String>());
        body.setVisibleTenants(new ArrayList<String>());
        body.setSequences(new ArrayList<Sequence>());
        body.setBusinessInformation(new APIBusinessInformation());
        body.setCorsConfiguration(new APICorsConfiguration());
        API response = apiSetup.apisPost(body);
        APIID = response.getId();
    }

    /**
     * Get a list of documents of an API
     * <p>
     * This operation can be used to retrive a list of documents belonging to an API by providing the id of the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test(dependsOnMethods = "apisApiIdDocumentsPostTest", enabled = true)
    public void apisApiIdDocumentsGetTest() throws ApiException {
        String apiId = APIID;
        Integer limit = null;
        Integer offset = null;
        String accept = null;
        String ifNoneMatch = null;
        DocumentList response = api.apisApiIdDocumentsGet(apiId, limit, offset, ifNoneMatch);

        Assert.assertEquals(response.getList().get(0).getName(), "Help", "Document name mismatch");
    }

    /**
     * Add a new document to an API
     * <p>
     * This operation can be used to add a new documentation to an API. This operation only adds the metadata of a document. To add the actual content we need to use **Upload the content of an API document ** API once we obtain a document Id by this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test(enabled = true)
    public void apisApiIdDocumentsPostTest() throws ApiException {
        String apiId = APIID;
        String ifUnmodifiedSince = null;
        String ifMatch = null;
        Document body = new Document();
        body.setName("Help");
        body.setType(Document.TypeEnum.HOWTO);
        body.setSourceType(Document.SourceTypeEnum.INLINE);
        body.setVisibility(Document.VisibilityEnum.API_LEVEL);
        body.setInlineContent("This is the inline content");
        String contentType = "application/json";
        Document response = api.apisApiIdDocumentsPost(apiId, body,ifMatch,ifUnmodifiedSince);

        Assert.assertEquals(response.getName(), "Help", "Document name mismatch");
    }

    @AfterClass
    public void afterClass() throws ApiException {
        // remove DocAPI
        APIList response = apiSetup.apisGet(1, 1, null, null);
        apiIndividualApi.apisApiIdDelete(response.getList().get(0).getId(), null, null);
    }
}
