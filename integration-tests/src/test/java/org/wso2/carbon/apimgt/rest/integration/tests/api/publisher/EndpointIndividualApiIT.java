/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.api.publisher;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.ApiException;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.EndpointCollectionApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.EndPoint;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.EndPointEndpointSecurity;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.EndPointList;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.Error;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.EndpointIndividualApi;
import org.testng.annotations.Test;

/**
 * API tests for EndpointIndividualApi
 */
public class EndpointIndividualApiIT {

    private final EndpointIndividualApi api = new EndpointIndividualApi();
    private final TestUtils testUtils = new TestUtils();
    private final EndpointCollectionApi endpointCollectionApi = new EndpointCollectionApi();

    @Test
    public void endpointsEndpointIdDeleteTest() throws ApiException {

        String endPointId1 = testUtils.createEndPoint("Endpoint-145", "{\"serviceUrl\":\"http://petstore.swagger.io/\"}", "user", "user");
        String endPointId2 = testUtils.createEndPoint("Endpoint-146", "{\"serviceUrl\":\"http://petstore.swagger.io/\"}", "user", "user");

        String ifMatch = null;
        String ifModifiedSince = null;
        String ifNoneMatch = null;
        String ifUnmodifiedSince = null;
        api.endpointsEndpointIdDelete(endPointId1, ifMatch, ifUnmodifiedSince);
        EndPointList response = endpointCollectionApi.endpointsGet(ifNoneMatch, ifModifiedSince);
        for(int i =0; i< response.getCount(); i++)
        {
            if(response.getList().get(i).getName().equals("Endpoint-145"))
            {
                assert false;
            }
        }
        assert true;

    }

    /**
     * FAILS
     * Please refer https://github.com/wso2/product-apim/issues/1630
     */
    @Test
    public void endpointsEndpointIdDeleteTest_NF() throws ApiException {

        String endPointId = "invalidEndPointId";
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        try {
            api.endpointsEndpointIdDelete(endPointId, ifMatch, ifUnmodifiedSince);
            assert false;
        }
        catch (ApiException ae)
        {
            int statusCode = ae.getCode();
            Assert.assertEquals(statusCode, 404, "status code mismatch");
        }
    }

    @Test
    public void endpointsEndpointIdGetTest() throws ApiException {
        String endPointName = "EndPoint-142";
        String endPointConfig = "{\"serviceUrl\":\"http://petstore.swagger.io/\"}";
        String username = "user";
        String password = "pass";
        String endpointId = testUtils.createEndPoint(endPointName, endPointConfig, username, password);
        String ifUnmodifiedSince = null;
        String ifMatch = null;
        EndPoint response = api.endpointsEndpointIdGet(endpointId, ifMatch, ifUnmodifiedSince);

        Assert.assertEquals(response.getName(),"EndPoint-142", "Endpoint Name mismatch");
        Assert.assertEquals(response.getType(), "production", "EndPoint type mismatch");
        Assert.assertEquals(response.getMaxTps().longValue(), 1000, "EndPoint MaxTps mismatch");
        Assert.assertEquals(response.getEndpointConfig(), "{\"serviceUrl\":\"http://petstore.swagger.io/\"}", "EndPoint config mismatch");
        Assert.assertEquals(response.getId(), endpointId, "EndPoint id mismatch");
        Assert.assertEquals(response.getEndpointSecurity().getUsername(), "user", "EndPointSecurity username mismatch");
        Assert.assertEquals(response.getEndpointSecurity().getPassword(), "pass", "EndPointSecurity password mismatch");
        Assert.assertEquals(response.getEndpointSecurity().getEnabled().toString(), "false", "EndPointSecurity isEnable mismatch");
        Assert.assertEquals(response.getEndpointSecurity().getType(), "http", "EndPointSecurity type mismatch");

        testUtils.deleteEndPoint(endpointId);
    }

    @Test
    public void endpointsEndpointIdGetTest_NF() throws ApiException {
        String endpointId = "invalidEndPointId";
        String ifUnmodifiedSince = null;
        String ifMatch = null;
        try
        {
            api.endpointsEndpointIdGet(endpointId, ifMatch, ifUnmodifiedSince);
            assert false;
        }
        catch (ApiException ae)
        {
            int statusCode = ae.getCode();
            JsonParser parser= new JsonParser();
            JsonObject responseBody = (JsonObject) parser.parse(ae.getResponseBody());
            String errorMsg = responseBody.get("message").getAsString();
            Assert.assertEquals(statusCode, 404, "status code mismatch");
            Assert.assertEquals(errorMsg, "Endpoint Not Found", "Error message mismatch");
        }
    }

    @Test(enabled = false)
    public void endpointsEndpointIdPutTest() throws ApiException {
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        String endPointName = "EndPoint-209";
        String endPointConfig = "{\"serviceUrl\":\"http://petstore.swagger.io/\"}";
        String username = "user";
        String password = "pass";
        String endpointId = testUtils.createEndPoint(endPointName, endPointConfig, username, password);
        System.out.println(endpointId);
        String endPointConfig2 = "{\"serviceUrl\":\"http://ws.cdyne.com/phoneverify/phoneverify.asmx/\"}";
        EndPoint body = new EndPoint();
        body.setEndpointConfig(endPointConfig2);
        EndPoint response = api.endpointsEndpointIdPut(endpointId, body, ifMatch, ifUnmodifiedSince);

        System.out.println(response);

        testUtils.deleteEndPoint(endpointId);
    }

    @AfterClass
    public void afterClass() throws ApiException {
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;

        EndPointList response = endpointCollectionApi.endpointsGet(ifNoneMatch, ifModifiedSince);
        for (int i = 0; i < response.getCount(); i++) {
            String endpointId = response.getList().get(i).getId();
            api.endpointsEndpointIdDelete(endpointId, ifMatch, ifUnmodifiedSince);
            testUtils.deleteApi();
        }
    }
}
