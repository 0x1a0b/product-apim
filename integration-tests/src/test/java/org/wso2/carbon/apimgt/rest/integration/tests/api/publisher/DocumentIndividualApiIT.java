/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: 0.10.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.api.publisher;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.ApiResponse;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.DocumentCollectionApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.DocumentIndividualApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APICollectionApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APIIndividualApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.ApiException;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.*;

import java.io.File;
import java.util.ArrayList;


/**
 * API tests for DocumentIndividualApi
 */
public class DocumentIndividualApiIT {

    private final DocumentIndividualApi api = new DocumentIndividualApi();
    private final DocumentCollectionApi docApi = new DocumentCollectionApi();
    private final APICollectionApi apiSetup = new APICollectionApi();
    private final APIIndividualApi apiIndividualApi = new APIIndividualApi();
    private final TestUtils testUtils = new TestUtils();

    private String APIID = null;
    private String DOCID = null;

    @BeforeClass
    public void beforeClass() throws ApiException {

        // Create an API for testing
        API body = new API();
        String ifMatch = null;
        String ifUnmodifiedSince = null;

        body.setName("DocsAPII");
        body.setContext("docssi");
        body.setVersion("1.0.0");
        body.setProvider("admin");
        body.setLifeCycleStatus("CREATED");
        body.setTransport(new ArrayList<String>() {{
            add("http");
        }});
        body.setCacheTimeout(100);
        body.setPolicies(new ArrayList<String>() {{
            add("Unlimited");
        }});
        body.setVisibility(API.VisibilityEnum.PUBLIC);
        body.setTags(new ArrayList<String>());
        body.setVisibleRoles(new ArrayList<String>());
        body.setVisibleTenants(new ArrayList<String>());
        body.setSequences(new ArrayList<Sequence>());
        body.setBusinessInformation(new APIBusinessInformation());
        body.setCorsConfiguration(new APICorsConfiguration());
        API response = apiSetup.apisPost(body);
        APIID = response.getId();


        Document docBody = new Document();
        docBody.setName("Help");
        docBody.setType(Document.TypeEnum.HOWTO);
        docBody.setSummary("This is the summary.");
        docBody.setSourceType(Document.SourceTypeEnum.INLINE);
        docBody.setVisibility(Document.VisibilityEnum.API_LEVEL);
        Document docResponse = docApi.apisApiIdDocumentsPost(response.getId(), docBody, ifMatch,ifUnmodifiedSince);
        DOCID = docResponse.getDocumentId();
    }

    /**
     *  please refer https://github.com/wso2/product-apim/issues/1575
     * due to this issue response cannot be taken to be compared. Therefore disabling this test until the issue is fixed.
     *
     **/
    @Test(enabled = false)
    public void apisApiIdDocumentsDocumentIdContentGetTest() throws ApiException {
        String apiId = APIID;
        String documentId = DOCID;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        api.apisApiIdDocumentsDocumentIdContentGet(apiId, documentId, ifNoneMatch, ifModifiedSince);

    }

    @Test
    public void apisApiIdDocumentsDocumentIdContentGet_failureTest_404_invalidDoc() throws ApiException {
        String apiId = APIID;
        String documentId = "invalidDocId";
        String ifNoneMatch = null;
        String ifModifiedSince = null;

        try {
            api.apisApiIdDocumentsDocumentIdContentGet(apiId, documentId, ifNoneMatch, ifModifiedSince);
            assert false;
        }
        catch (ApiException apiException)
        {
            int statusCode = apiException.getCode();
            Assert.assertEquals(statusCode, 404, "status code mismatch");
        }

    }

    //FAILS
    //this scenario has not defined
    @Test(enabled = true)
    public void apisApiIdDocumentsDocumentIdContentGet_failureTest_404_invalidApi() throws ApiException {
        String apiId = "invalidApi";
        String documentId = DOCID;
        String ifNoneMatch = null;
        String ifModifiedSince = null;

        try {
            api.apisApiIdDocumentsDocumentIdContentGet(apiId, documentId, ifNoneMatch, ifModifiedSince);
            assert false;
        }
        catch (ApiException apiException)
        {
            int statusCode = apiException.getCode();
            Assert.assertEquals(statusCode, 404, "status code mismatch");
        }

    }

    @Test
    public void apisApiIdDocumentsDocumentIdContentPostTest_INLINE() throws ApiException {
        String apiId = APIID;
        String documentId = DOCID;
        File file = null;
        String inlineContent = "The content";
        String ifMatch = null;
        String ifUnmodifiedSince = null;

        ApiResponse response = api.apisApiIdDocumentsDocumentIdContentPostWithHttpInfo(apiId, documentId, file, inlineContent, ifMatch, ifUnmodifiedSince);
        Assert.assertEquals(response.getStatusCode(), 201, "Status code mismatch - INLINE");
    }
    @Test
    public void apisApiIdDocumentsDocumentIdContentPostTest_FILE() throws ApiException {
        String apiId = APIID;
        String ifMatch = null;
        String ifUnmodifiedSince = null;

        File file = new File(getClass().getResource("/file1.pdf").getFile());

        Document docBody2 = new Document();
        docBody2.setName("Help2");
        docBody2.setType(Document.TypeEnum.HOWTO);
        docBody2.setSummary("This is the summary.");
        docBody2.setSourceType(Document.SourceTypeEnum.FILE);
        docBody2.setVisibility(Document.VisibilityEnum.API_LEVEL);
        Document docResponse = docApi.apisApiIdDocumentsPost(apiId, docBody2, ifMatch,ifUnmodifiedSince);
        String documentId2 = docResponse.getDocumentId();

        ApiResponse response2 = api.apisApiIdDocumentsDocumentIdContentPostWithHttpInfo(apiId, documentId2, file, null, ifMatch, ifUnmodifiedSince);
        Assert.assertEquals(response2.getStatusCode(), 201, "Status code mismatch - FILE");
    }

    @Test
    public void apisApiIdDocumentsDocumentIdContentPostTest_FILE_FailureTest_404() throws ApiException {
        String apiId = APIID;
        String documentId = "invalidDocID";
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        File file = new File(getClass().getResource("/file1.pdf").getFile());

        try {
            api.apisApiIdDocumentsDocumentIdContentPost(apiId, documentId, file, null, ifMatch, ifUnmodifiedSince);
        }
        catch (ApiException apiException)
        {
            int statusCode = apiException.getCode();
            Assert.assertEquals(statusCode, 404, "Status code mismatch - FILE");
        }

    }

    @Test
    public void apisApiIdDocumentsDocumentIdContentPostTest_FILE_FailureTest_400() throws ApiException {
        String apiId = APIID;
        String documentId = DOCID;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        File file = new File(getClass().getResource("/img1.jpg").getFile());

        try {
            api.apisApiIdDocumentsDocumentIdContentPost(apiId, documentId, file, null, ifMatch, ifUnmodifiedSince);
        }
        catch (ApiException apiException)
        {
            int statusCode = apiException.getCode();
            Assert.assertEquals(statusCode, 400, "Status code mismatch - FILE");
        }

    }

    @Test
    public void apisApiIdDocumentsDocumentIdContentPostTest_INLINE_FailureTest_404() throws ApiException {
        String apiId = APIID;
        String documentId = "invalidDocID";
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        String inlineContent = "The content";

        try {
            api.apisApiIdDocumentsDocumentIdContentPost(apiId, documentId, null, inlineContent, ifMatch, ifUnmodifiedSince);
        }
        catch (ApiException apiException)
        {
            int statusCode = apiException.getCode();
            Assert.assertEquals(statusCode, 404, "Status code mismatch - FILE");
        }

    }

    @Test
    public void apisApiIdDocumentsDocumentIdDeleteTest() throws ApiException {
        String ifNoneMatch = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;

        String apiId = testUtils.createApi("API-150", "1.0.0", "API-150");
        Document docBody = new Document();
        docBody.setName("Help");
        docBody.setType(Document.TypeEnum.HOWTO);
        docBody.setSummary("This is the summary.");
        docBody.setSourceType(Document.SourceTypeEnum.INLINE);
        docBody.setVisibility(Document.VisibilityEnum.API_LEVEL);
        Document docResponse = docApi.apisApiIdDocumentsPost(apiId, docBody, ifMatch,ifUnmodifiedSince);
        String documentId = docResponse.getDocumentId();

        api.apisApiIdDocumentsDocumentIdDelete(apiId, documentId, ifMatch, ifUnmodifiedSince);
        DocumentList response = docApi.apisApiIdDocumentsGet(apiId, 10, 0, ifNoneMatch);
        int documentCount = response.getCount();
        Assert.assertEquals(documentCount, 0, "document count mismatch");
    }

    /* FAILS
   * Please refer
   * https://github.com/wso2/product-apim/issues/1617
   * Therefore making the test disabled.
   */
    @Test(enabled = false)
    public void apisApiIdDocumentsDocumentIdDeleteTest_NF_invalidDocument() throws ApiException {
        String apiId = APIID;
        String documentId = "invalidDocID";
        String ifMatch = null;
        String ifUnmodifiedSince = null;
       try {
            api.apisApiIdDocumentsDocumentIdDelete(apiId, documentId, ifMatch, ifUnmodifiedSince);
            assert false;
       }
       catch (ApiException ae)
        {
            int responseCode = ae.getCode();
            Assert.assertEquals(responseCode, 404, "Response code mismatch");

        }

    }

    /*FAILS
    * Please refer
    * https://github.com/wso2/product-apim/issues/1617
    * Therefore making the test disabled.
    */
    @Test(enabled = false)
    public void apisApiIdDocumentsDocumentIdDeleteTest_NF_invalidAPI() throws ApiException {
        String apiId = "invalidApi";
        String documentId = DOCID;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        try {
            api.apisApiIdDocumentsDocumentIdDelete(apiId, documentId, ifMatch, ifUnmodifiedSince);
            assert false;
        }
        catch (ApiException ae)
        {
            int responseCode = ae.getCode();
            Assert.assertEquals(responseCode, 404, "Response code mismatch");

        }

    }

    @Test
    public void apisApiIdDocumentsDocumentIdGetTest() throws ApiException {
        String apiId = APIID;
        String documentId = DOCID;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        Document response = api.apisApiIdDocumentsDocumentIdGet(apiId, documentId, ifNoneMatch, ifModifiedSince);
        System.out.println(response);
        Assert.assertEquals(response.getName(), "Help", "Document name mismatch");
        Assert.assertEquals(response.getVisibility().toString(), "API_LEVEL", "Document visibility mismatch");
        Assert.assertEquals(response.getSourceType().toString(), "INLINE", "Document visibility mismatch");
        Assert.assertEquals(response.getType().toString(), "HOWTO", "Document visibility mismatch");
        Assert.assertEquals(response.getSummary().toString(), "This is the summary.", "Document summary mismatch");
    }

    @Test
    public void apisApiIdDocumentsDocumentIdGetTest_NF() throws ApiException {
        String apiId = APIID;
        String documentId = "invalidDocID";
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        try {
            api.apisApiIdDocumentsDocumentIdGet(apiId, documentId, ifNoneMatch, ifModifiedSince);
        }
        catch (ApiException ae)
        {
            int responseCode = ae.getCode();
            JsonParser parser= new JsonParser();
            JsonObject responseBody = (JsonObject) parser.parse(ae.getResponseBody());
            String errorMsg = responseBody.get("message").getAsString();
            System.out.println(errorMsg);

            Assert.assertEquals(responseCode, 404, "Response code mismatch");
            Assert.assertEquals(errorMsg, "Documentation not found.", "Response message mismatch");
        }
    }

    @Test
    public void apisApiIdDocumentsDocumentIdPutTest() throws ApiException {
        String apiId = APIID;
        String documentId = DOCID;
        Document body = new Document();
        body.setSourceType(Document.SourceTypeEnum.FILE);
        body.setType(Document.TypeEnum.SWAGGER_DOC);
        body.setVisibility(Document.VisibilityEnum.OWNER_ONLY);
        body.setSummary("Summary changed");
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        Document response = api.apisApiIdDocumentsDocumentIdPut(apiId, documentId, body,ifMatch, ifUnmodifiedSince);

        Assert.assertEquals(response.getType().toString(),"SWAGGER_DOC", "Type update fails");
        Assert.assertEquals(response.getSummary().toString(),"Summary changed", "Summary update fails");
        Assert.assertEquals(response.getSourceType().toString(),"FILE", "Source Type update fails");
        Assert.assertEquals(response.getVisibility().toString(),"OWNER_ONLY", "Visibility update fails");
    }

    @Test
    public void apisApiIdDocumentsDocumentIdPut_failureTest_404() throws ApiException {
        String apiId = "invalidId";
        String documentId = DOCID;
        Document body = new Document();
        body.setSourceType(Document.SourceTypeEnum.FILE);
        body.setType(Document.TypeEnum.SWAGGER_DOC);
        body.setVisibility(Document.VisibilityEnum.OWNER_ONLY);
        body.setSummary("Summary changed");
        String ifMatch = null;
        String ifUnmodifiedSince = null;

        try {
            Document response = api.apisApiIdDocumentsDocumentIdPut(apiId, documentId, body, ifMatch, ifUnmodifiedSince);
        }
        catch (ApiException apiException)
        {
            int statusCode = apiException.getCode();
            Assert.assertEquals(statusCode, 404, "status code mismatch");
        }
        }


    /**
     * FAILS
     * please refer https://github.com/wso2/product-apim/issues/1629
     */
    @Test
    public void apisApiIdDocumentsDocumentIdPut_failureTest_400() throws ApiException {
        String apiId = APIID;
        String documentId = DOCID;
        Document body = new Document();
        String ifMatch = null;
        String ifUnmodifiedSince = null;

        try {
            Document response = api.apisApiIdDocumentsDocumentIdPut(apiId, documentId, body, ifMatch, ifUnmodifiedSince);
        }
        catch (ApiException apiException)
        {
            int statusCode = apiException.getCode();
            Assert.assertEquals(statusCode, 400, "status code mismatch");
        }
    }


    @AfterClass
    public void afterClass() throws ApiException {
        APIList response = apiSetup.apisGet(10, 0, null, null);
        for (int i=0 ; i< response.getCount(); i++)
        {
            apiIndividualApi.apisApiIdDelete(response.getList().get(i).getId(), null, null);
        }
    }
}
