/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: 0.10.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.api.publisher;

import org.junit.Test;
import org.testng.annotations.BeforeClass;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.ApiException;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APICollectionApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APIIndividualApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.SubscriptionIndividualApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.*;

import java.util.ArrayList;
import java.util.UUID;

/**
 * API tests for SubscriptionIndividualApi
 */
public class SubscriptionIndividualApiIT {

    private final SubscriptionIndividualApi api = new SubscriptionIndividualApi();
    private final APIIndividualApi apiIndividualApi = new APIIndividualApi();
    private final APICollectionApi apiCollectionApi = new APICollectionApi();

    private String APIID = null;
    private String SUBSCRIPTIONID = null;

    @BeforeClass
    public void beforeClass() throws ApiException {

        // Create an API for testing
        API body = new API();
        String contentType = "application/json";

        body.setName("IndivAPI");
        body.setContext("iapi");
        body.setVersion("1.0.0");
        body.setProvider("admin");
        body.setLifeCycleStatus("CREATED");
        body.setTransport(new ArrayList<String>() {{
            add("http");
        }});
        body.setCacheTimeout(100);
        body.setPolicies(new ArrayList<String>() {{
            add("Unlimited");
        }});
        body.setVisibility(API.VisibilityEnum.PUBLIC);
        body.setTags(new ArrayList<String>());
        body.setVisibleRoles(new ArrayList<String>());
        body.setVisibleTenants(new ArrayList<String>());
        body.setSequences(new ArrayList<Sequence>());
        body.setBusinessInformation(new APIBusinessInformation());
        body.setCorsConfiguration(new APICorsConfiguration());
        API response = apiCollectionApi.apisPost(body);
        APIID = response.getId();

        apiIndividualApi.apisChangeLifecyclePost("Published", APIID, null, null, null);

        Subscription subscription = new Subscription();

        subscription.setPolicy("Unlimited");
        subscription.setSubscriptionId("0001111AAA");

        SubscriptionList subscriptionList = new SubscriptionList();
        subscriptionList.addListItem(subscription);

        SUBSCRIPTIONID = subscription.getSubscriptionId();
    }

    
    /**
     * Block a subscription
     *
     * This operation can be used to block a subscription. Along with the request, &#x60;blockState&#x60; must be specified as a query parameter.  1. &#x60;BLOCKED&#x60; : Subscription is completely blocked for both Production and Sandbox environments. 2. &#x60;PROD_ONLY_BLOCKED&#x60; : Subscription is blocked for Production environment only. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsBlockSubscriptionPostTest() throws ApiException {
        String subscriptionId = SUBSCRIPTIONID;
        String blockState = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        // api.subscriptionsBlockSubscriptionPost(subscriptionId, blockState, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Get details of a subscription
     *
     * This operation can be used to get details of a single subscription. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsSubscriptionIdGetTest() throws ApiException {
        String subscriptionId = SUBSCRIPTIONID;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        Subscription response = api.subscriptionsSubscriptionIdGet(subscriptionId, ifNoneMatch, ifModifiedSince);
        System.out.println(response);

        // TODO: test validations
    }
    
    /**
     * Unblock a Subscription
     *
     * This operation can be used to unblock a subscription specifying the subscription Id. The subscription will be fully unblocked after performing this operation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsUnblockSubscriptionPostTest() throws ApiException {
        String subscriptionId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        // api.subscriptionsUnblockSubscriptionPost(subscriptionId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
}
