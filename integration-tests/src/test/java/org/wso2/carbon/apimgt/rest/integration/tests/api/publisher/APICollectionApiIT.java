/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: 0.10.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.api.publisher;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APICollectionApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.ApiException;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APIList;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.api.APIIndividualApi;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.API;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APIBusinessInformation;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.APICorsConfiguration;
import org.wso2.carbon.apimgt.rest.integration.tests.publisher.model.Sequence;
import org.testng.annotations.Test;
import java.util.ArrayList;


/**
 * API tests for APICollectionApi
 */
public class APICollectionApiIT {

    private final APICollectionApi api = new APICollectionApi();
    private final TestUtils testUtils= new TestUtils();
    private static String apiID;

    @Test(description = "This testcase verifies if created APIS can be viewed through Publisher REST API.")
    public void apisGetTest() throws ApiException{
        Integer limit = 10;
        Integer offset = 0;
        String query = null;
        String ifNoneMatch = null;

        try {
            String apiId1 = testUtils.createApi("TestApi1", "1.0.0", "testapi1");
            String apiId2 = testUtils.createApi("TestApi2", "1.0.0", "testapi2");
            APIList response = api.apisGet(limit, offset, query, ifNoneMatch);

            if (response.getList().get(0).getName().equals("TestApi1")) {
                Assert.assertEquals(response.getList().get(0).getName(), "TestApi1", "API name mismatch");
                Assert.assertEquals(response.getList().get(0).getId(), apiId1, "API Id mismatch");
                Assert.assertEquals(response.getList().get(0).getDescription(), "This is the api description", "API description mismatch");
                Assert.assertEquals(response.getList().get(0).getContext(), "testapi1", "API context mismatch");
                Assert.assertEquals(response.getList().get(0).getVersion(), "1.0.0", "API version mismatch");
                Assert.assertEquals(response.getList().get(0).getLifeCycleStatus(), "Created", "API Lifecycle status mismatch");

                Assert.assertEquals(response.getList().get(1).getName(), "TestApi2", "API name mismatch");
                Assert.assertEquals(response.getList().get(1).getId(), apiId2, "API Id mismatch");
                Assert.assertEquals(response.getList().get(1).getDescription(), "This is the api description", "API description mismatch");
                Assert.assertEquals(response.getList().get(1).getContext(), "testapi2", "API context mismatch");
                Assert.assertEquals(response.getList().get(1).getVersion(), "1.0.0", "API version mismatch");
                Assert.assertEquals(response.getList().get(1).getLifeCycleStatus(), "Created", "API Lifecycle status mismatch");
            } else {
                Assert.assertEquals(response.getList().get(0).getName(), "TestApi2", "API name mismatch");
                Assert.assertEquals(response.getList().get(0).getId(), apiId2, "API Id mismatch");
                Assert.assertEquals(response.getList().get(0).getDescription(), "This is the api description", "API description mismatch");
                Assert.assertEquals(response.getList().get(0).getContext(), "testapi2", "API context mismatch");
                Assert.assertEquals(response.getList().get(0).getVersion(), "1.0.0", "API version mismatch");
                Assert.assertEquals(response.getList().get(0).getLifeCycleStatus(), "Created", "API Lifecycle status mismatch");

                Assert.assertEquals(response.getList().get(1).getName(), "TestApi1", "API name mismatch");
                Assert.assertEquals(response.getList().get(1).getId(), apiId1, "API Id mismatch");
                Assert.assertEquals(response.getList().get(1).getDescription(), "This is the api description", "API description mismatch");
                Assert.assertEquals(response.getList().get(1).getContext(), "testapi1", "API context mismatch");
                Assert.assertEquals(response.getList().get(1).getVersion(), "1.0.0", "API version mismatch");
                Assert.assertEquals(response.getList().get(1).getLifeCycleStatus(), "Created", "API Lifecycle status mismatch");

            }
            testUtils.deleteApi();
        }
        catch (ApiException apiException)
        {
            System.out.println(apiException.getCode());
            System.out.println(apiException.getResponseBody());
            assert false;
        }
    }

    /**
     * Please refer https://github.com/wso2/product-apim/issues/1575
     * Therefore making this test disabled.
     */
    @Test(enabled = false)
    public void apisHeadTest() throws ApiException {
            try {
                testUtils.createApi("API-117", "1.0.0", "API-117");
                String query_name = "name:API-117";
                String query_version = "version:1.0.0";
                String query_context = "context:API-117";
                String ifNoneMatch = null;

                api.apisHead(query_name, ifNoneMatch);
                api.apisHead(query_version, ifNoneMatch);
                api.apisHead(query_context, ifNoneMatch);

                testUtils.deleteApi();
            }
            catch(ApiException ae)
            {
                testUtils.deleteApi();
                Assert.assertEquals(ae.getCode(), 200, "status code mismatch");
            }
    }

    @Test
    public void apisHead_FailureTest() throws ApiException {
        try {
            String query = "name:DoesNotExist";
            String ifNoneMatch = null;
            api.apisHead(query, ifNoneMatch);
        }
        catch (ApiException ae)
        {
            int statusCode = ae.getCode();
            Assert.assertEquals(statusCode, 404, "status code mismatch");
        }
    }

    @Test(description = "This testcase verifies if an API can be created successfully. ")
    public void apisPostTest() throws ApiException {
        try {
            API body = new API();
            body.setName("API-118");
            body.setDescription("This is the api description");
            body.setContext("API-118");
            body.setVersion("1.0.0");
            body.setProvider("admin");
            body.setLifeCycleStatus("CREATED");
            body.setTransport(new ArrayList<String>() {{
                add("http");
            }});
            body.setCacheTimeout(100);
            body.setPolicies(new ArrayList<String>() {{
                add("Unlimited");
            }});
            body.setVisibility(API.VisibilityEnum.PUBLIC);
            body.setTags(new ArrayList<String>());
            body.setVisibleRoles(new ArrayList<String>());
            body.setVisibleTenants(new ArrayList<String>());
            body.setSequences(new ArrayList<Sequence>());
            body.setBusinessInformation(new APIBusinessInformation());
            body.setCorsConfiguration(new APICorsConfiguration());
            API response = api.apisPost(body);
            this.apiID = response.getId();

            Assert.assertEquals(response.getName(), "API-118", "api name mismatch");
            Assert.assertEquals(response.getDescription(), "This is the api description", "API description mismatch");
            Assert.assertEquals(response.getContext(), "API-118", "API context mismatch");
            Assert.assertEquals(response.getVersion(), "1.0.0", "API version mismatch");
            Assert.assertEquals(response.getLifeCycleStatus(), "Created", "API Lifecycle status mismatch");
            testUtils.deleteApi();
        }
        catch (ApiException apiException)
        {
            System.out.println(apiException.getResponseBody());
            System.out.println(apiException.getCode());
            assert false;
        }
    }

    @Test(description = "This testcase verifies if API name can be duplicated - The same name, different context")
    public void createApi_existingName_FailureTest() throws ApiException
    {
        try {
            testUtils.createApi("TestApi1", "1.0.0", "testapi1");
            API body = new API();
            body.setName("TestApi1");
            body.setDescription("This is the api description");
            body.setContext("testapi2");
            body.setVersion("1.0.0");
            body.setProvider("admin");
            body.setLifeCycleStatus("CREATED");
            body.setTransport(new ArrayList<String>() {{
                add("http");
            }});
            body.setCacheTimeout(100);
            body.setPolicies(new ArrayList<String>() {{
                add("Unlimited");
            }});
            body.setVisibility(API.VisibilityEnum.PUBLIC);
            body.setTags(new ArrayList<String>());
            body.setVisibleRoles(new ArrayList<String>());
            body.setVisibleTenants(new ArrayList<String>());
            body.setSequences(new ArrayList<Sequence>());
            body.setBusinessInformation(new APIBusinessInformation());
            body.setCorsConfiguration(new APICorsConfiguration());
        }
        catch (ApiException ae)
        {
            JsonParser parser= new JsonParser();
            JsonObject responseBody = (JsonObject) parser.parse(ae.getResponseBody());
            int errorCode = ae.getCode();
            String errorMsg = responseBody.get("message").getAsString();

            Assert.assertEquals(errorCode, 409, "Error code mismatch");
            Assert.assertEquals(errorMsg, "The API already exists.","Error message mismatch");
        }
        finally {
            APIList response = api.apisGet(10, 0, null, null);
            int apiCount = response.getCount();
            Assert.assertEquals(apiCount, 1, "createApi_existingName() test failed");
            testUtils.deleteApi();
        }

    }

    @Test(description = "This testcase verifies if api can be created without providing the API name.", enabled = false)
    public void apisPostTest_NF_withoutTheName_FailureTest() throws ApiException {
            API body = new API();
            try {
                body.setName(""); //sending a null value to name
                body.setDescription("This is the api description");
                body.setContext("API-117");
                body.setVersion("1.0.0");
                body.setProvider("admin");
                body.setLifeCycleStatus("CREATED");
                body.setTransport(new ArrayList<String>() {{
                    add("http");
                }});
                body.setCacheTimeout(100);
                body.setPolicies(new ArrayList<String>() {{
                    add("Unlimited");
                }});
                body.setVisibility(API.VisibilityEnum.PUBLIC);
                body.setTags(new ArrayList<String>());
                body.setVisibleRoles(new ArrayList<String>());
                body.setVisibleTenants(new ArrayList<String>());
                body.setSequences(new ArrayList<Sequence>());
                body.setBusinessInformation(new APIBusinessInformation());
                body.setCorsConfiguration(new APICorsConfiguration());
                api.apisPost(body);

            }catch (ApiException ae)
            {
                JsonParser parser= new JsonParser();
                JsonObject responseBody = (JsonObject) parser.parse(ae.getResponseBody());
                String errorMsg = responseBody.get("message").getAsString();
                int errorCode = ae.getCode();
                Assert.assertEquals(errorCode, 400, "response code mismatch");
                Assert.assertEquals(errorMsg, "name may not be null", "response message mismatch");
            }
            finally {
                APIList response = api.apisGet(10, 0, null, null);
                int apiCount = response.getCount();
                Assert.assertEquals(apiCount, 0, "createApi_existingName() test failed");
            }
    }

    @Test(description = "This testcase verifies if api can be created without providing the API version.", enabled = false)
    public void apisPostTest_withoutTheVersion_FailureTest() throws ApiException {
        API body = new API();
        try {
            body.setName("API-117");
            body.setDescription("This is the api description");
            body.setContext("API-117");
            //body.setVersion("1.0.0");  //attribute is not passed
            body.setProvider("admin");
            body.setLifeCycleStatus("CREATED");
            body.setTransport(new ArrayList<String>() {{
                add("http");
            }});
            body.setCacheTimeout(100);
            body.setPolicies(new ArrayList<String>() {{
                add("Unlimited");
            }});
            body.setVisibility(API.VisibilityEnum.PUBLIC);
            body.setTags(new ArrayList<String>());
            body.setVisibleRoles(new ArrayList<String>());
            body.setVisibleTenants(new ArrayList<String>());
            body.setSequences(new ArrayList<Sequence>());
            body.setBusinessInformation(new APIBusinessInformation());
            body.setCorsConfiguration(new APICorsConfiguration());
            api.apisPost(body);
        }catch (ApiException ae)
        {
            JsonParser parser= new JsonParser();
            JsonObject responseBody = (JsonObject) parser.parse(ae.getResponseBody());
            String errorMsg = responseBody.get("message").getAsString();
            int errorCode = ae.getCode();
            Assert.assertEquals(errorCode, 400, "response code mismatch");
            Assert.assertEquals(errorMsg, "version may not be null", "response message mismatch");
        }
        finally {
            APIList response = api.apisGet(10, 0, null, null);
            int apiCount = response.getCount();
            Assert.assertEquals(apiCount, 0, "createApi_existingName() test failed");
        }
    }

    @AfterClass
    public void afterClass() throws ApiException {
        APIIndividualApi apiClient = new APIIndividualApi();

        APIList response = api.apisGet(10, 0, null, null);
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        for(int i=0; i < response.getCount(); i++)
        {
            String apiId = response.getList().get(i).getId();
            apiClient.apisApiIdDelete(apiId, ifMatch, ifUnmodifiedSince);
        }
    }

}
