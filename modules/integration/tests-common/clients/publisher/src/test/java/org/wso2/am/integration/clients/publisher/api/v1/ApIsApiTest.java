/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;
import java.io.File;
import org.wso2.am.integration.clients.publisher.api.v1.dto.FileInfoDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ResourcePathListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ThrottlingPolicyDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApIsApi
 */
@Ignore
public class ApIsApiTest {

    private final ApIsApi api = new ApIsApi();

    
    /**
     * Delete an API
     *
     * This operation can be used to delete an existing API proving the Id of the API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdDeleteTest() throws ApiException {
        String apiId = null;
        String ifMatch = null;
        api.apisApiIdDelete(apiId, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Get details of an API
     *
     * Using this operation, you can retrieve complete details of a single API. You need to provide the Id of the API to retrive it. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdGetTest() throws ApiException {
        String apiId = null;
        String xWSO2Tenant = null;
        String ifNoneMatch = null;
        APIDTO response = api.apisApiIdGet(apiId, xWSO2Tenant, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Update an API
     *
     * This operation can be used to update an existing API. But the properties &#x60;name&#x60;, &#x60;version&#x60;, &#x60;context&#x60;, &#x60;provider&#x60;, &#x60;state&#x60; will not be changed by this operation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdPutTest() throws ApiException {
        String apiId = null;
        APIDTO body = null;
        String ifMatch = null;
        APIDTO response = api.apisApiIdPut(apiId, body, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Get Resource Paths of an API
     *
     * This operation can be used to retrieve resource paths defined for a specific api. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdResourcePathsGetTest() throws ApiException {
        String apiId = null;
        Integer limit = null;
        Integer offset = null;
        String ifNoneMatch = null;
        ResourcePathListDTO response = api.apisApiIdResourcePathsGet(apiId, limit, offset, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Get details of the subscription throttling policies of an API 
     *
     * This operation can be used to retrieve details of the subscription throttling policy of an API by specifying the API Id.  &#x60;X-WSO2-Tenant&#x60; header can be used to retrive API subscription throttling policies that belongs to a different tenant domain. If not specified super tenant will be used. If Authorization header is present in the request, the user&#39;s tenant associated with the access token will be used. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdSubscriptionPoliciesGetTest() throws ApiException {
        String apiId = null;
        String xWSO2Tenant = null;
        String ifNoneMatch = null;
        ThrottlingPolicyDTO response = api.apisApiIdSubscriptionPoliciesGet(apiId, xWSO2Tenant, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Get swagger definition
     *
     * This operation can be used to retrieve the swagger definition of an API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdSwaggerGetTest() throws ApiException {
        String apiId = null;
        String ifNoneMatch = null;
        String response = api.apisApiIdSwaggerGet(apiId, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Update swagger definition
     *
     * This operation can be used to update the swagger definition of an existing API. Swagger definition to be updated is passed as a form data parameter &#x60;apiDefinition&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdSwaggerPutTest() throws ApiException {
        String apiId = null;
        String apiDefinition = null;
        String ifMatch = null;
        api.apisApiIdSwaggerPut(apiId, apiDefinition, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Get thumbnail image
     *
     * This operation can be used to download a thumbnail image of an API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdThumbnailGetTest() throws ApiException {
        String apiId = null;
        String ifNoneMatch = null;
        api.apisApiIdThumbnailGet(apiId, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Create a new API version
     *
     * This operation can be used to create a new version of an existing API. The new version is specified as &#x60;newVersion&#x60; query parameter. New API will be in &#x60;CREATED&#x60; state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisCopyApiPostTest() throws ApiException {
        String newVersion = null;
        String apiId = null;
        Boolean defaultVersion = null;
        api.apisCopyApiPost(newVersion, apiId, defaultVersion);

        // TODO: test validations
    }
    
    /**
     * Retrieve/Search APIs 
     *
     * This operation provides you a list of available APIs qualifying under a given search condition.  Each retrieved API is represented with a minimal amount of attributes. If you want to get complete details of an API, you need to use **Get details of an API** operation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String xWSO2Tenant = null;
        String query = null;
        String ifNoneMatch = null;
        Boolean expand = null;
        String accept = null;
        String tenantDomain = null;
        APIListDTO response = api.apisGet(limit, offset, xWSO2Tenant, query, ifNoneMatch, expand, accept, tenantDomain);

        // TODO: test validations
    }
    
    /**
     * Import API Definition
     *
     * This operation can be used to create api from api definition.  API definition is GraphQL Schema 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisImportGraphqlSchemaPostTest() throws ApiException {
        String type = null;
        File file = null;
        String additionalProperties = null;
        String ifMatch = null;
        APIDTO response = api.apisImportGraphqlSchemaPost(type, file, additionalProperties, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Create a new API
     *
     * This operation can be used to create a new API specifying the details of the API in the payload. The new API will be in &#x60;CREATED&#x60; state.  There is a special capability for a user who has &#x60;APIM Admin&#x60; permission such that he can create APIs on behalf of other users. For that he can to specify &#x60;\&quot;provider\&quot; : \&quot;some_other_user\&quot;&#x60; in the payload so that the API&#39;s creator will be shown as &#x60;some_other_user&#x60; in the UI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisPostTest() throws ApiException {
        APIDTO body = null;
        String openAPIVersion = null;
        APIDTO response = api.apisPost(body, openAPIVersion);

        // TODO: test validations
    }
    
    /**
     * Get WSDL definition
     *
     * This operation can be used to retrieve the WSDL definition of an API. It can be either a single WSDL file or a WSDL archive.  The type of the WSDL of the API is indicated at the \&quot;wsdlInfo\&quot; element of the API payload definition. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWSDLOfAPITest() throws ApiException {
        String apiId = null;
        String ifNoneMatch = null;
        api.getWSDLOfAPI(apiId, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Import an OpenAPI Definition
     *
     * This operation can be used to create an API from an OpenAPI definition. Provide either &#x60;url&#x60; or &#x60;file&#x60; to specify the definition.  Specify additionalProperties with **at least** API&#39;s name, version, context and endpointConfig. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importOpenAPIDefinitionTest() throws ApiException {
        File file = null;
        String url = null;
        String additionalProperties = null;
        APIDTO response = api.importOpenAPIDefinition(file, url, additionalProperties);

        // TODO: test validations
    }
    
    /**
     * Import a WSDL Definition
     *
     * This operation can be used to create an API using a WSDL definition. Provide either &#x60;url&#x60; or &#x60;file&#x60; to specify the definition.  WSDL can be speficied as a single file or a ZIP archive with WSDLs and reference XSDs etc. Specify additionalProperties with **at least** API&#39;s name, version, context and endpointConfig. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importWSDLDefinitionTest() throws ApiException {
        File file = null;
        String url = null;
        String additionalProperties = null;
        String implementationType = null;
        APIDTO response = api.importWSDLDefinition(file, url, additionalProperties, implementationType);

        // TODO: test validations
    }
    
    /**
     * Upload a thumbnail image
     *
     * This operation can be used to upload a thumbnail image of an API. The thumbnail to be uploaded should be given as a form data parameter &#x60;file&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAPIThumbnailTest() throws ApiException {
        String apiId = null;
        File file = null;
        String ifMatch = null;
        FileInfoDTO response = api.updateAPIThumbnail(apiId, file, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Update WSDL definition
     *
     * This operation can be used to update the WSDL definition of an existing API. WSDL to be updated can be passed as either \&quot;url\&quot; or \&quot;file\&quot;. Only one of \&quot;url\&quot; or \&quot;file\&quot; can be used at the same time. \&quot;file\&quot; can be specified as a single WSDL file or as a zip file which has a WSDL and its dependencies (eg: XSDs) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWSDLOfAPITest() throws ApiException {
        String apiId = null;
        File file = null;
        String url = null;
        String ifMatch = null;
        api.updateWSDLOfAPI(apiId, file, url, ifMatch);

        // TODO: test validations
    }
    
}
