/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIProductDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIProductListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;
import java.io.File;
import org.wso2.am.integration.clients.publisher.api.v1.dto.FileInfoDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiProductsApi
 */
@Ignore
public class ApiProductsApiTest {

    private final ApiProductsApi api = new ApiProductsApi();

    
    /**
     * Delete an API Product
     *
     * This operation can be used to delete an existing API Product proving the Id of the API Product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsApiProductIdDeleteTest() throws ApiException {
        String apiProductId = null;
        String ifMatch = null;
        api.apiProductsApiProductIdDelete(apiProductId, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Get details of an API Product
     *
     * Using this operation, you can retrieve complete details of a single API Product. You need to provide the Id of the API to retrive it. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsApiProductIdGetTest() throws ApiException {
        String apiProductId = null;
        String accept = null;
        String ifNoneMatch = null;
        APIProductDTO response = api.apiProductsApiProductIdGet(apiProductId, accept, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Update an API product
     *
     * This operation can be used to update an existing API product. But the properties &#x60;name&#x60;, &#x60;provider&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsApiProductIdPutTest() throws ApiException {
        String apiProductId = null;
        APIProductDTO body = null;
        String ifMatch = null;
        APIProductDTO response = api.apiProductsApiProductIdPut(apiProductId, body, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Get swagger definition
     *
     * This operation can be used to retrieve the swagger definition of an API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsApiProductIdSwaggerGetTest() throws ApiException {
        String apiProductId = null;
        String accept = null;
        String ifNoneMatch = null;
        api.apiProductsApiProductIdSwaggerGet(apiProductId, accept, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * upload swagger definition
     *
     * This operation can be used to create/update the swagger definition of an existing API Product. Swagger definition to be updated is passed as a form data parameter &#x60;apiDefinition&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsApiProductIdSwaggerPutTest() throws ApiException {
        String apiProductId = null;
        String apiDefinition = null;
        String ifMatch = null;
        api.apiProductsApiProductIdSwaggerPut(apiProductId, apiDefinition, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Get thumbnail image
     *
     * This operation can be used to download a thumbnail image of an API product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsApiProductIdThumbnailGetTest() throws ApiException {
        String apiProductId = null;
        String accept = null;
        String ifNoneMatch = null;
        api.apiProductsApiProductIdThumbnailGet(apiProductId, accept, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Upload a thumbnail image
     *
     * This operation can be used to upload a thumbnail image of an API Product. The thumbnail to be uploaded should be given as a form data parameter &#x60;file&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsApiProductIdThumbnailPutTest() throws ApiException {
        String apiProductId = null;
        File file = null;
        String ifMatch = null;
        FileInfoDTO response = api.apiProductsApiProductIdThumbnailPut(apiProductId, file, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieve/Search API Products 
     *
     * This operation provides you a list of available API Products qualifying under a given search condition.  Each retrieved API Product is represented with a minimal amount of attributes. If you want to get complete details of an API Product, you need to use **Get details of an API Product** operation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String query = null;
        String accept = null;
        String ifNoneMatch = null;
        APIProductListDTO response = api.apiProductsGet(limit, offset, query, accept, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Create a new API Product
     *
     * This operation can be used to create a new API Product specifying the details of the API Product in the payload. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsPostTest() throws ApiException {
        APIProductDTO body = null;
        APIProductDTO response = api.apiProductsPost(body);

        // TODO: test validations
    }
    
}
