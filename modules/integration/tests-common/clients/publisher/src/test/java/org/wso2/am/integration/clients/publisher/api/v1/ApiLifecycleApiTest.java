/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.LifecycleHistoryDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.LifecycleStateDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.WorkflowResponseDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiLifecycleApi
 */
@Ignore
public class ApiLifecycleApiTest {

    private final ApiLifecycleApi api = new ApiLifecycleApi();

    
    /**
     * Get Lifecycle state change history of the API.
     *
     * This operation can be used to retrieve Lifecycle state change history of the API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdLifecycleHistoryGetTest() throws ApiException {
        String apiId = null;
        String ifNoneMatch = null;
        LifecycleHistoryDTO response = api.apisApiIdLifecycleHistoryGet(apiId, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Get Lifecycle state data of the API.
     *
     * This operation can be used to retrieve Lifecycle state data of the API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdLifecycleStateGetTest() throws ApiException {
        String apiId = null;
        String ifNoneMatch = null;
        LifecycleStateDTO response = api.apisApiIdLifecycleStateGet(apiId, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Delete pending lifecycle state change tasks.
     *
     * This operation can be used to remove pending lifecycle state change requests that are in pending state 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdLifecycleStatePendingTasksDeleteTest() throws ApiException {
        String apiId = null;
        api.apisApiIdLifecycleStatePendingTasksDelete(apiId);

        // TODO: test validations
    }
    
    /**
     * Change API Status
     *
     * This operation is used to change the lifecycle of an API. Eg: Publish an API which is in &#x60;CREATED&#x60; state. In order to change the lifecycle, we need to provide the lifecycle &#x60;action&#x60; as a query parameter.  For example, to Publish an API, &#x60;action&#x60; should be &#x60;Publish&#x60;. Note that the &#x60;Re-publish&#x60; action is available only after calling &#x60;Block&#x60;.  Some actions supports providing additional paramters which should be provided as &#x60;lifecycleChecklist&#x60; parameter. Please see parameters table for more information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisChangeLifecyclePostTest() throws ApiException {
        String action = null;
        String apiId = null;
        String lifecycleChecklist = null;
        String ifMatch = null;
        WorkflowResponseDTO response = api.apisChangeLifecyclePost(action, apiId, lifecycleChecklist, ifMatch);

        // TODO: test validations
    }
    
}
